from SSDpy.constitutive.constlaws import boucWen
from SSDpy.dyn.EOMsolvers import CHNL
import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
from time import time
from scipy.signal import find_peaks

def boucWen_1DOF(y,t,loading,p,mass):
    """ Dynamics of a 1-DOF mass-spring system with Bouc-Wen model for the spring, see [1]
    """
    A = np.diag([mass, mass, 1])

    Fint, dz = boucWen(y[:3], p)  # internal forces in the Bouc-Wen model

    Fext = applied_load(t, loading)
    b = np.array([mass * y[1], Fext - Fint, dz])

    dydt = np.linalg.solve(A, b)

    return dydt


def applied_load(t, loading):
    """ Applied load to the system
    """
    F = loading['F0'] * np.sin( loading['Omega']*t) * (1 - np.exp(-t/20))

    # Add noise, interpolated from the noise in the loading
    F = F + np.interp(t, loading['t_noise'], loading['F_noise'])
    
    return F

def CHNL_fExt(t, param):
    """ External force function for CHNL solver
    """
    f = applied_load(t, param['loading'])
    
    Fext = np.array([f,0])
    return Fext

def CHNL_fInt(q, v, p):

    u = q[0]
    z  = q[1]
    du = v[0]
    dz = v[1]

    # original Bouc-Wen model (Wen 1976)
    psi = p['gamma'] + p['beta'] * np.sign(du * z)

    F1 = p['c0'] * du + p['k0'] * (p['a'] * u + (1 - p['a']) * z)
    F2 = dz - (p['A'] - np.abs(z)**p['n'] * psi) * du

    Fint = np.array([F1,F2])

    k11 = p['k0']*p['a']
    k12 = p['k0']*(1-p['a'])
    k21 = 0
    k22 = (np.abs(z) * p['beta'] * np.sign(z*du) * du +
            p['n'] * psi * np.sign(z)) * np.abs(z)**(p['n']-1) * du

    c11 = p['c0']
    c12 = 0
    c21 = - p['A'] + np.abs(z)**p['n'] * ( psi + p['beta'] * np.sign(z*du) * z * du)
    c22 = 1

    K = np.array([[k11, k12], [k21, k22]])
    C = np.array([[c11, c12], [c21, c22]])
    
    return Fint, K, C

def fwd_boucWen_1DOF(t, loading, p, mass=1, y0 = [0, 0, 0], solver = "CHNL"):
    """ Forward Bouc-Wen model for 1-DOF mass-spring system
    loading : contains information about the applied load
    p       : dictionary with Bouc-Wen parameters
    mass    : mass of the 1-DOF system
    y0      : initial conditions [u0, u_dot0, z0]
    solver : solver to use, either "odeint" or "CHNL"
    """
    # Solve ODE
    if solver == "odeint":
        y = odeint(boucWen_1DOF, y0, t, args=(loading,p,mass))
        
        # Store internal forces
        Fint = np.zeros((len(t),1))
        for i in range(0, len(t)):
            f, dz = boucWen(y[i,:], p) 
            Fint[i,0] = f

        sol = {'t': t,         # time (s)
                'y': y,        # structural displacement (m)
                'Fint': Fint}  # internal force (N)

    else:
        params['M'] =  np.diag([mass, 1e-6*mass])
        params['IC'] = np.array([0, 0, 0, 0]) # [u0,z0 , du0,dz0]
        params['fExt'] = CHNL_fExt
        params['fInt'] = CHNL_fInt

        sol = CHNL(params)

    return sol

def getPolarCoord(x,y):
    """ Get polar coordinates from cartesian coordinates
    """
    x = x.reshape(-1,1)

    r = np.sqrt(x**2 + y**2)
    theta = np.arctan2(y,x)
    return r, theta

def paramUpdate():
    pass

# define problem parameters
t = np.linspace(0, 200, 1000)
loading = {'F0': 0.5 , 'Omega': 1.0, 'noise': 0.3}
sim_noise = {'y1': 0.1}
p1_BW = {'gamma': 0.05, 'beta': 0.5,
    'A': 2, 'n': 3, 'c0': 0.5, 'k0': 1, 'a': 0.1}

# add noise in the loading
F_noise = loading['F0'] * np.random.normal(loc=0,scale=loading['noise'],size=t.size)
loading['F_noise'] = F_noise
loading['t_noise'] = t

params = p1_BW.copy()
params['loading'] = loading
params['sim_noise'] = sim_noise


print('Start ODE integration. Running...')
start_time = time()

# first analysis with ODEINT solver
sol = fwd_boucWen_1DOF(t,loading,params, solver="odeint")

elapsed_time = time() - start_time
print('Stop ODE integration (ODEINT), elapsed time: %.2f s' % elapsed_time)

npts = 500
r_F, theta_F = getPolarCoord( sol['y'][len(t)-npts:len(t), 0] * params['k0']  , sol['Fint'][len(t)-npts:len(t)])

plt.figure()
plt.subplot(1,2,1)
plt.plot(params['k0'] * sol['y'][:,0], sol['Fint'])
plt.xlabel('Elastic internal force (m)')
plt.ylabel('Internal force (N)')

plt.subplot(1,2,2)
plt.plot(t,sol['y'][:,0],label='displacement')
plt.plot(t,sol['y'][:,2],label='z')
plt.xlabel('Time (s)')
plt.ylabel('Displacement (m)')
plt.legend()
plt.ylim([-1,1])

plt.figure()
plt.plot(theta_F/np.pi, r_F, label='polar representation')
plt.xlabel('Theta / pi')
plt.ylabel('Radial forces (N)')

plt.show()

# Create a perturbed version of the actual parameters and try to infer them
p1_BW0 = p1_BW.copy()
# loop over all fields in p1_BW0 & add noise
for key in p1_BW0:
    p1_BW0[key] = p1_BW0[key] * ( 1 + np.random.uniform(low=-0.5,high=1.5))

params0 = p1_BW0.copy()
params0['loading'] = loading
params0['sim_noise'] = sim_noise
params0['loading']['F_noise'] = np.zeros(F_noise.size)

sol0 = fwd_boucWen_1DOF(t,loading,params0, solver="odeint")
r_F0, theta_F0 = getPolarCoord( sol0['y'][len(t)-npts:len(t), 0] * params['k0']  , sol0['Fint'][len(t)-npts:len(t)])


plt.figure()
plt.plot(theta_F/np.pi, r_F, 'o', label='polar representation')
plt.plot(theta_F0/np.pi, r_F0, 'o', label='polar representation')
plt.xlabel('Theta / pi')
plt.ylabel('Radial forces (N)')


# Do Bayesian inferrence
u0  = sol0['y'][:,0]
du0 = sol0['y'][:,1]

# Initialize average x0_0 and covariance matrix P0_0
x0_0 = np.array([0, 0.05, 0.5, 0.5, 1, 0.1, 2, 3])
P0_0 = np.diag([0.1, 0.01, 0.1, 0.1, 0.1, 0.01, 0.1, 0.1])

Q = np.diag([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]) * 10
R = 0.05

k=0
mu_x_mm = x0_0
P_x_mm = P0_0

save_mu_x_nn = np.zeros((len(t),8))
save_P_x_nn = np.zeros((len(t),8,8))

dt = t[1] - t[0]
while k < len(t):
    print('Iteration %d' % k)
    # Generate prior samples assuming multivariate normal distribution
    x_mm = np.random.multivariate_normal(mu_x_mm, P_x_mm, 50000)
    x_mm = x_mm[x_mm[:,0] > 0,:]
    x_mm = x_mm[x_mm[:,1] > 0,:]
    x_mm = x_mm[x_mm[:,2] > 0,:]
    x_mm = x_mm[x_mm[:,3] > 0,:]
    x_mm = x_mm[x_mm[:,4] > 0,:]
    x_mm = x_mm[x_mm[:,5] > 0,:]
    x_mm = x_mm[x_mm[:,6] > 0,:]
    x_mm = x_mm[x_mm[:,7] > 0,:]
    x_mm = x_mm[x_mm[:,7] < 6,:]
    # Time update
    f = x_mm[:,0] + dt * (x_mm[:,6] - np.abs(x_mm[:,0]) ** x_mm[:,7] * (x_mm[:,1] + x_mm[:,2] * np.sign(du0[k] * x_mm[:,0]))) * du0[k] 
    f = f[f > 0]
    mu_x_nm = np.zeros((8,))
    mu_x_nm[0] = np.mean(f)
    P_x_nm = np.zeros((8,8))
    P_x_nm[0,0] = np.var(f)
    P_x_nm = P_x_nm + Q
    # Generate predictive samples
    x_nm = np.random.multivariate_normal(mu_x_nm, P_x_nm, 50000)
    # If exponent is negative or large than 6, remove it
    x_nm = x_nm[x_nm[:,0] > 0,:]
    x_nm = x_nm[x_nm[:,1] > 0,:]
    x_nm = x_nm[x_nm[:,2] > 0,:]
    x_nm = x_nm[x_nm[:,3] > 0,:]
    x_nm = x_nm[x_nm[:,4] > 0,:]
    x_nm = x_nm[x_nm[:,5] > 0,:]
    x_nm = x_nm[x_nm[:,6] > 0,:]
    x_nm = x_nm[x_nm[:,7] > 0,:]
    x_nm = x_nm[x_nm[:,7] < 6,:]
    
    # measurement update
    h = x_nm[:,3] * du0[k] + x_nm[:,4] * (x_nm[:,5] * u0[k] + (1 - x_nm[:,5]) * x_nm[:,0])
    mu_y_nm = np.mean(h)
    P_y_nm = np.var(h) + R
    P_xy_nm = np.dot(h.T,x_nm) - mu_x_nm * mu_y_nm
    # Kalman gain
    K = P_xy_nm / P_y_nm
    # Update
    mu_x_nn = mu_x_nm + K * (sol['Fint'][k] - mu_y_nm)
    P_x_nn = P_x_nm - K * P_y_nm * K.T * 0.0001
    # Store in memory
    save_mu_x_nn[k,:] = mu_x_nn
    save_P_x_nn[k,:,:] = P_x_nn
    
    print(mu_x_nn)
    print(P_x_nn)
    print(np.min(np.linalg.eigvals(P_x_nn)))
    # Advance
    mu_x_mm = mu_x_nn
    P_x_mm = P_x_nn
    k = k + 1



doThis = False
if doThis:
    # second analysis with CHNL solver
    params['rhoInf'] = .99
    params['num'] = [t.size, t[-1], 1e-4, 10]

    print('Start ODE integration. Running...')
    start_time = time()

    sol = fwd_boucWen_1DOF(t,loading,params)

    elapsed_time = time() - start_time
    print('Stop ODE integration (CHUNG-HULBERT), elapsed time: %.2f s' % elapsed_time)

    plt.figure()
    plt.subplot(1,2,1)
    plt.plot(sol['disp'][0,:],sol['fInt'][0,:])
    plt.xlabel('Displacement (m)')
    plt.ylabel('Internal force (N)')

    plt.subplot(1,2,2)
    plt.plot(sol['time'],sol['disp'][0,:],label='displacement')
    plt.plot(sol['time'],sol['disp'][1,:],label='z')
    plt.xlabel('Time (s)')
    plt.ylabel('Displacement (m)')
    plt.legend()
    plt.ylim([-1,1])

    plt.show()

print("Done.")

